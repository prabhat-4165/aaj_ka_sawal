// subarray with sum equals k.... leetcode

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int>m;
        int count = 0;
        int sum = 0;
        for (int i=0;i<nums.size();i++)
        {
            sum += nums[i];
            if (sum == k)
                count++;
                if (m.find(sum-k)!=m.end())
                   count = m[sum-k] + count;

                   if (m.find(sum)!= m.end())
                       m[sum]++;
                       else
                          m[sum] = 1;
        }
        return count;
    }
};

// 1013. Partition Array Into Three Parts With Equal Sum

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        int n = arr.size();
        int sum = 0;
        for (int i=0;i<n;i++)
        {
            sum += arr[i];
        }       
           if (sum%3 != 0){
               return false;
           }
              int x = sum/3;
              int sum_temp = 0;
              int count = 0;
              for (int i=0;i<n;i++)
              {
                  sum_temp += arr[i];

                 if (sum_temp == x){
                     sum_temp =0;
                     count++;
                 }

              }
              if (count >= 3)
              {
                  return true;
              }
                 else 
                 return false;
    }
};

