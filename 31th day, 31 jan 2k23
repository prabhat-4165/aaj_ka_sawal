// 162. find peak element 

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if (n == 1)
            return 0;
        if (nums[0] > nums[1])
            return 0;
        if (nums[n - 1] > nums[n - 2])    
            return n - 1;    
        int low = 1, high = n - 2;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1])
                return mid; 
            else if (nums[mid - 1] > nums[mid])
                high = mid - 1;
            else
                low = mid + 1;        
        }
        return -1;
    }
};

// 303. range sum query

class NumArray {
public:
    vector<int>nums;
    NumArray(vector<int>& nums) {
        this -> nums = nums;
    }
    
    int sumRange(int left, int right) {
        return accumulate(this->nums.begin()+left,this->nums.begin()+right+1,0);
    }
};

