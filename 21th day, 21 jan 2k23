// counting bits leetcode question

class Solution {
public:
   int findBinary(int i)
   {
       vector<int>ans;
       while (i)
       {
           ans.push_back(i%2);
           i = i/2;
       } int count = 0;
       for (auto x:ans)
       {
           if (x==1)
               count++;
       }
       return count;
   }

    vector<int> countBits(int n) {
        vector<int> res;
        for (int i=0;i<=n;i++)
        {
           int num = findBinary(i);
           res.push_back(num);
        }
        return res;
    }
};

// valid pallindrome leetcode question

#include<iostream>
#include<string>
#include<vector>
class Solution {

    char tolowercase(char ch){
        if ( (ch>='a' && ch<='z') || (ch>='0' && ch<='9') ){
            return ch;
        }
           else {
               char temp = ch -'A' + 'a';
               return temp;
           }
    }


    bool valid (char ch){
        if ( (ch>='a' && ch<='z') || (ch>='A' && ch<='Z') || (ch>='0' && ch<='9') ){
            return 1;
        }
        return 0;
    }

    bool checkPalindrome(string a){
        int s =0;
        int e = a.length()-1;
        while(s<=e){
            if (a[s]!=a[e]){
                return 0;
            }
              else {
                  s++;
                  e--;
              }
        }
        return 1;
    }
    public:
    bool isPalindrome(string s) {
       string temp= ""; 

       for(int i=0; i<s.length();i++ ){
           if (valid(s[i])){
               temp.push_back(s[i]);
           }
       } 

       for(int i=0;i<temp.length();i++){
           temp[i] = tolowercase(temp[i]);
       }
       return checkPalindrome(temp);
    }
};
