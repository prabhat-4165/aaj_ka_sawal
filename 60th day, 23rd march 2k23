// 238. Product of Array Except Self

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
           int right = 1;
           int n = nums.size();
           vector <int> output(n);
           output[0] = 1;
           for (int i=1;i<n;i++){
                output[i] = output[i-1] * nums[i-1];
           }

           for (int i=n-1;i>=0;i--){
               output[i] = output[i] * right;
               right = right*nums[i]; 
           }
           return output;
    }
};

// 2594. Minimum Time to Repair Cars

class Solution {
public:
    bool timetowash(vector<int>& ranks, int cars, long long min){
        long long totalcars = 0;
        for (int i=0;i<ranks.size();i++){
             int x = sqrt(min/ranks[i]);
             totalcars += x;
        }
           if (totalcars >= cars)
               return true;
               else 
               return false;
    }

    long long repairCars(vector<int>& ranks, int cars) {
        long long s = 0;
        long long e = 1e14;
        long long mid = s + (e-s)/2;
        while (s < e){
            if (timetowash(ranks,cars,mid))
                e = mid;
                else 
                s = mid + 1;
               mid = s + (e-s)/2;      
        }
        return s;
    }
};

